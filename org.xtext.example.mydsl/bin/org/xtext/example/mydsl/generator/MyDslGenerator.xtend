/*
 * generated by Xtext 2.34.0
 */
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.example.mydsl.myDsl.Model
import org.xtext.example.mydsl.myDsl.User_Story
import org.xtext.example.mydsl.myDsl.Title
import org.xtext.example.mydsl.myDsl.Nutzen
import org.xtext.example.mydsl.myDsl.Rolle
import org.xtext.example.mydsl.myDsl.Ziel_Wunsch
import java.nio.charset.StandardCharsets

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MyDslGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val model = resource.allContents.filter(typeof(Model)).head
		if (model !== null) {
			generateCSV(model, fsa)
		}
	}
	
	def generateCSV(Model model, IFileSystemAccess2 fsa) {
		val csvBuilder = new StringBuilder
		csvBuilder.append('User Story,Title,Nutzen,Rolle,Ziel Wunsch').append('\n')
		
		for (userStory : model.user_story) {
			val title = userStory.title
			val nutzen = userStory.nutzen
			val rolle = userStory.rolle
			val zielWunsch = userStory.ziel_wunsch
			
			csvBuilder.append(userStoryToString(userStory)).append(',')
			csvBuilder.append(titleToString(title)).append(',')
			csvBuilder.append(nutzenToString(nutzen)).append(',')
			csvBuilder.append(rolleToString(rolle)).append(',')
			csvBuilder.append(zielWunschToString(zielWunsch)).append('\r\n')
		}
		
		val csvContent = csvBuilder.toString
		val bytes = csvContent.getBytes(StandardCharsets.UTF_8)
		fsa.generateFile('output/user_stories.csv', new String(bytes))
	}
	
	def String userStoryToString(User_Story userStory) {
		userStory.title.substantiv + " " + userStory.title.infinitiv
	}
	
	def String titleToString(Title title) {
		title.substantiv + " " + title.infinitiv
	}
	
	def String nutzenToString(Nutzen nutzen) {
		val inf = nutzen.verb.replaceFirst("zu", "")
		nutzen.subject + " " + inf
	}
	
	def String rolleToString(Rolle rolle) {
		rolle.substantiv
	}
	
	def String zielWunschToString(Ziel_Wunsch zielWunsch) {
		zielWunsch.subject + " " + zielWunsch.infinitiv
	}
}

