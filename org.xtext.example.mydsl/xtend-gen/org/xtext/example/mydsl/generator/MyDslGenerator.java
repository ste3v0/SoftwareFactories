/**
 * generated by Xtext 2.34.0
 */
package org.xtext.example.mydsl.generator;

import com.google.common.collect.Iterators;
import java.nio.charset.StandardCharsets;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.xtext.example.mydsl.myDsl.Model;
import org.xtext.example.mydsl.myDsl.Nutzen;
import org.xtext.example.mydsl.myDsl.Rolle;
import org.xtext.example.mydsl.myDsl.Title;
import org.xtext.example.mydsl.myDsl.User_Story;
import org.xtext.example.mydsl.myDsl.Ziel_Wunsch;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MyDslGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final Model model = IteratorExtensions.<Model>head(Iterators.<Model>filter(resource.getAllContents(), Model.class));
    if ((model != null)) {
      this.generateCSV(model, fsa);
    }
  }

  public void generateCSV(final Model model, final IFileSystemAccess2 fsa) {
    final StringBuilder csvBuilder = new StringBuilder();
    csvBuilder.append("User Story,Title,Nutzen,Rolle,Ziel Wunsch").append("\n");
    EList<User_Story> _user_story = model.getUser_story();
    for (final User_Story userStory : _user_story) {
      {
        final Title title = userStory.getTitle();
        final Nutzen nutzen = userStory.getNutzen();
        final Rolle rolle = userStory.getRolle();
        final Ziel_Wunsch zielWunsch = userStory.getZiel_wunsch();
        csvBuilder.append(this.userStoryToString(userStory)).append(",");
        csvBuilder.append(this.titleToString(title)).append(",");
        csvBuilder.append(this.nutzenToString(nutzen)).append(",");
        csvBuilder.append(this.rolleToString(rolle)).append(",");
        csvBuilder.append(this.zielWunschToString(zielWunsch)).append("\r\n");
      }
    }
    final String csvContent = csvBuilder.toString();
    final byte[] bytes = csvContent.getBytes(StandardCharsets.UTF_8);
    String _string = new String(bytes);
    fsa.generateFile("output/user_stories.csv", _string);
  }

  public String userStoryToString(final User_Story userStory) {
    String _substantiv = userStory.getTitle().getSubstantiv();
    String _plus = (_substantiv + " ");
    String _infinitiv = userStory.getTitle().getInfinitiv();
    return (_plus + _infinitiv);
  }

  public String titleToString(final Title title) {
    String _substantiv = title.getSubstantiv();
    String _plus = (_substantiv + " ");
    String _infinitiv = title.getInfinitiv();
    return (_plus + _infinitiv);
  }

  public String nutzenToString(final Nutzen nutzen) {
    String _xblockexpression = null;
    {
      final String inf = nutzen.getVerb().replaceFirst("zu", "");
      String _subject = nutzen.getSubject();
      String _plus = (_subject + " ");
      _xblockexpression = (_plus + inf);
    }
    return _xblockexpression;
  }

  public String rolleToString(final Rolle rolle) {
    return rolle.getSubstantiv();
  }

  public String zielWunschToString(final Ziel_Wunsch zielWunsch) {
    String _subject = zielWunsch.getSubject();
    String _plus = (_subject + " ");
    String _infinitiv = zielWunsch.getInfinitiv();
    return (_plus + _infinitiv);
  }
}
